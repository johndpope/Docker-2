---
version: "3.7"
services:
  traefik:
    image: traefik:v2.2
    networks:
      - traefik-proxy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
#    deploy:
#      placement:
#        constraints:
#          # Make the traefik service run only on the node with this label
#          # as the node with it has the volume for the certificates
#          - node.labels.traefik-public.traefik-public-certificates == true
    security_opt:
      - no-new-privileges:true
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=traefik-public"

      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$SECONDDOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME"
      - "traefik.http.routers.traefik-rtr.service=api@internal"

      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"

      - "traefik.http.services.traefik-public.loadbalancer.server.port=8080"
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.insecure=true
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$SECONDDOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik-public
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    volumes:
      - $DOCKERDIR/traefik/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik/acme/acme.json:/acme.json
      - $DOCKERDIR/traefik/traefik.log:/traefik.log
      - $DOCKERDIR/shared:/shared
    restart: unless-stopped

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    networks:
      - traefik-proxy
    ports:
      - "$PORTAINER_PORT:9000"
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=HostHeader(`portainer.$SECONDDOMAINNAME`)"
      ## Middlewares
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
      - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"
    environment:
      - TZ=$TZ
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    restart: unless-stopped

  # Organizr - Unified Frontend
  organizr:
    image: organizrtools/organizr-v2
    container_name: organizr-v2
    networks:
      - traefik-proxy
    ports:
      - $ORGANIZR_PORT:80
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=HostHeader(`$DOMAINNAME`,`www.SDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.organizr-rtr.middlewares=chain-basic-auth@file"
        # Redirect non-www to www middleware
      - "traefik.http.middlewares.organizr-redirect.redirectregex.regex=^https?://$DOMAINNAME/(.*)"
      - "traefik.http.middlewares.organizr-redirect.redirectregex.replacement=https://www.$DOMAINNAME/$${1}"
      - "traefik.http.middlewares.organizr-redirect.redirectregex.permanent=true"
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/organizr:/config
    restart: unless-stopped

  # Heimdall - Unified Dashboard
  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall
    networks:
      - traefik-proxy
    ports:
      - $HEIMDALL_PORT_01:80
      - $HEIMDALL_PORT_02:443
    security_opt:
      - no-new-privileges:true
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=HostHeader(`heimdall.$SECONDDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=$HEIMDALL_PORT_01"
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/heimdall:/config
    restart: unless-stopped

  ############################# INDEXERS

  # Jackett - Torrent proxy
  # Set url_base in Jackett settings if using PathPrefix
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    networks:
     - traefik-proxy
    ports:
      - "$JACKETT_PORT:9117"
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=HostHeader(`jackett.$SECONDDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=$JACKETT_PORT"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $DOCKERDIR/jackett:/config
      - $DOCKERDIR/jackett/blackhole:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    restart: unless-stopped

  # NZBHydra2 - NZB meta search
  hydra2:
    image: linuxserver/hydra2
    container_name: hydra2
    networks:
     - traefik-proxy
    ports:
      - $HYDRA2_PORT:5076
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers
      - "traefik.http.routers.hydra2-rtr.entrypoints=https"
      - "traefik.http.routers.hydra2-rtr.rule=HostHeader(`hydra2.$SECONDDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.hydra2-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.hydra2-rtr.service=hydra2-svc"
      - "traefik.http.services.hydra2-svc.loadbalancer.server.port=$HYDRA2_PORT"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $DOCKERDIR/hydra2:/config
      - nova-nzb:/downloads
    restart: unless-stopped

  ############################# PVRS

  # Lidarr - Music Management
  # Set url_base in lidarr settings if using PathPrefix
  lidarr:
    image: linuxserver/lidarr
    container_name: lidarr
    networks:
     - traefik-proxy
    ports:
      - "$LIDARR_PORT:8686"
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.lidarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr-bypass.rule=Headers(`X-Api-Key`, `$LIDARR_API_KEY`) || Query(`apikey`, `$LIDARR_API_KEY`)"
      - "traefik.http.routers.lidarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr.rule=HostHeader(`lidarr.$SECONDDOMAINNAME`)"
      - "traefik.http.routers.lidarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.lidarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.lidarr-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      - "traefik.http.routers.lidarr-rtr-bypass.service=lidarr-svc"
      - "traefik.http.services.lidarr-svc.loadbalancer.server.port=$LIDARR_PORT"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $DOCKERDIR/lidarr:/config
      - nova-media:/media
      - nova-downloads:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    restart: unless-stopped

  # Radarr - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr:
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    networks:
     - traefik-proxy
    ports:
      - $RADARR_PORT:7878
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`)"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=HostHeader(`radarr.$SECONDDOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=$RADARR_PORT"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
      - UMASK_SET=022 #optional
    volumes:
      - /docker-data/radarr:/config
      - nova-media:/media
      - nova-downloads:/downloads
    restart: unless-stopped

  # Sonarr - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    networks:
     - traefik-proxy
    ports:
      - $SONARR_PORT:8989
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`)"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=HostHeader(`sonarr.$SECONDDOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=$SONARR_PORT"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $DOCKERDIR/sonarr:/config
      - nova-media:/media
      - nova-downloads:/downloads
    restart: unless-stopped

  # Lazylibrarian  – Ebooks and Management
  lazylibrarian:
    image: linuxserver/lazylibrarian
    container_name: lazylibrarian
    networks:
     - traefik-proxy
    ports:
      - $LAZYLIBRARIAN_PORT:5299
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers
      - "traefik.http.routers.lazylibrarian-rtr.entrypoints=https"
      - "traefik.http.routers.lazylibrarian-rtr.rule=HostHeader(`lazylibrarian.$SECONDDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.lazylibrarian-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.lazylibrarian-rtr.service=lazylibrarian-svc"
      - "traefik.http.services.lazylibrarian-svc.loadbalancer.server.port=$LAZYLIBRARIAN_PORT"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
      - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
    volumes:
      - $DOCKERDIR/lazylibrarian:/config
      - nova-downloads:/downloads
      - nova-media:/books
    restart: unless-stopped

  ############################# MEDIA

  # Calibre-web  – Ebooks and Management (Plex of Ebooks)
  calibre-web:
    image: linuxserver/calibre-web
    networks:
      - traefik-proxy
    ports:
      - $CALIBRE_PORT:8083
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers
      - "traefik.http.routers.calibre-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-rtr.rule=HostHeader(`calibre.$SECONDDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.calibre-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.calibre-rtr.service=calibre-svc"
      - "traefik.http.services.calibre-svc.loadbalancer.server.port=$CALIBRE_PORT"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      DOCKER_MODS: linuxserver/calibre-web:calibre
    volumes:
      - $DOCKERDIR/calibre:/config
      - nova-media/Literature/eBooks:/books
    restart: unless-stopped

  # Ombi - Media Requests
  ombi:
    image: linuxserver/ombi
    container_name: ombi
    networks:
      - traefik-proxy
    ports:
      - $OMBI_PORT:3579
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers
      - "traefik.http.routers.ombi-rtr.entrypoints=https"
      - "traefik.http.routers.ombi-rtr.rule=HostHeader(`ombi.$SECONDDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.ombi-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.ombi-rtr.service=ombi-svc"
      - "traefik.http.services.ombi-svc.loadbalancer.server.port=$OMBI_PORT"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
      - BASE_URL=/ombi #optional
    volumes:
     - $DOCKERDIR/ombi:/config
    restart: unless-stopped

  # Tautulli - Previously PlexPy. Plex statistics and monitoring
  # Set HTTP Root in Tautulli settings if using PathPrefix
  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    networks:
     - traefik-proxy
    ports:
      - $TAUTULLI_PORT:8181
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=HostHeader(`tautulli.$SECONDDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=$TAUTULLI_PORT"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $DOCKERDIR/tautulli:/config
      - $DOCKERDIR/tautulli/logs:/logs
    restart: unless-stopped

  ############################# WEB

  wikijs:
    image: linuxserver/wikijs
    container_name: wikijs
    networks:
     - traefik-proxy
    ports:
      - $WIKIJS_PORT:3000
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers
      - "traefik.http.routers.wikijs-rtr.entrypoints=https"
      - "traefik.http.routers.wikijs-rtr.rule=HostHeader(`wikijs.$SECONDDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.wikijs-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.wikijs-rtr.service=wikijs-svc"
      - "traefik.http.services.wikijs-svc.loadbalancer.server.port=$WIKIJS_PORT"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $DOCKERDIR/wikijs:/config
      - $DOCKERDIR/wikijs/data:/data
    restart: unless-stopped

  freshrss:
    image: linuxserver/freshrss
    container_name: freshrss
    networks:
     - traefik-proxy
    ports:
     - $FRESHRSS_PORT:80
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik-proxy
      ## HTTP Routers
      - "traefik.http.routers.freshrss-rtr.entrypoints=https"
      - "traefik.http.routers.freshrss-rtr.rule=HostHeader(`freshrss.$SECONDDOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.freshrss-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.freshrss-rtr.service=freshrss-svc"
      - "traefik.http.services.freshrss-svc.loadbalancer.server.port=$FRESHRSS_PORT"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $DOCKERDIR/freshrss:/config
    restart: unless-stopped


########################### NETWORKS
# Create t2_proxy network
# docker network create t2_proxy
# Alternatively, you can specify the gateway and subnet to use
# docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 t2_proxy
# Subnet range 192.168.0.0/16 covers 192.168.0.0 to 192.168.255.255

networks:
  traefik-proxy:
    external: true
  default:
    driver: bridge

volumes:
  nova-downloads:
    driver: local
    driver_opts:
      type: none
      device: /smb/content-gateway/
      o: bind
  nova-media:
    driver: local
    driver_opts:
      type: none
      device: /smb/media/
      o: bind
  nova-downloads:
    driver: local
    driver_opts:
      type: none
      device: /smb/content-gateway/inbox
      o: bind

secrets:
  cloudflare_email:
    file: $SECRETSDIR/cloudflare_email
  cloudflare_api_key:
    file: $SECRETSDIR/cloudflare_api_key
  my_email:
    file: $SECRETSDIR/my_email
