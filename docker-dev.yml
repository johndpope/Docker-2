version: "3.7"
# MAIN DOCKER-COMPOSE

########################### NETWORKS
networks:
  t2_proxy:
    external:
      name: t2_proxy
  default:
    driver: bridge

services:
# Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:2.2.1 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
#      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/shared/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      # - "traefik.http.routers.http-catchall.entrypoints=http"
      # - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      # - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file"
  #
  # portainer:
  #   container_name: portainer
  #   image: portainer/portainer-ce:latest
  #   restart: unless-stopped
  #   # command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
  #   command: -H unix:///var/run/docker.sock
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   volumes:
  #     # - /var/run/docker.sock:/var/run/docker.sock:ro # # Use Docker Socket Proxy instead for improved security
  #     - $DOCKERDIR/portainer:/data # Change to local directory if you want to save/transfer config locally
  #   environment:
  #     - TZ=$TZ
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.portainer-rtr.entrypoints=https"
  #     - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.portainer-rtr.middlewares=middlewares-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.portainer-rtr.service=portainer-svc"
  #     - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"
  #
  # organizr:
  #   image: organizr/organizr
  #   container_name: organizr
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TZ
  #   volumes:
  #     - $DOCKERDIR/organizr:/config
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.organizr-rtr.entrypoints=https"
  #     - "traefik.http.routers.organizr-rtr.rule=Host(`organizr.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.organizr-rtr.middlewares=middlewares-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.organizr-rtr.service=organizr-svc"
  #     - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"
  #
  # heimdall:
  #   container_name: heimdall
  #   image: linuxserver/heimdall:latest
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$HEIMDALL_PORT:80"
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TZ
  #   volumes:
  #     - $DOCKERDIR/heimdall:/config
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.heimdall-rtr.entrypoints=https"
  #     - "traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.heimdall-rtr.middlewares=middlewares-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
  #     - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

  freshrss:
    image: linuxserver/freshrss
    container_name: freshrss
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
     - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/freshrss:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.fressrss-rtr.entrypoints=websecure"
      - "traefik.http.routers.freshrss-rtr.rule=Host(`freshrss.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.freshrss-rtr.middlewares=middlewares-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.freshrss-rtr.service=freshrss-svc"
      - "traefik.http.services.freshrss-svc.loadbalancer.server.port=80"

  # wikijs:
  #   image: linuxserver/wikijs
  #   container_name: wikijs
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TZ
  #   volumes:
  #     - $DOCKERDIR/wikijs:/config
  #     - $DOCKERDIR/wikijs/data:/data
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.wikijs-rtr.entrypoints=https"
  #     - "traefik.http.routers.wikijs-rtr.entrypoints=http"
  #     - "traefik.http.routers.wikijs-rtr.rule=Host(`wikijs.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.wikijs-rtr.middlewares=middlewares-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.wikijs-rtr.service=wikijs-svc"
  #     - "traefik.http.services.wikijs-svc.loadbalancer.server.port=3000"
  #
  # ombi:
  #   image: ghcr.io/linuxserver/ombi
  #   container_name: ombi
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TZ
  #   volumes:
  #     - $DOCKERDIR/ombi/config:/config
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.ombi-rtr.entrypoints=https"
  #     - "traefik.http.routers.ombi-rtr.rule=Host(`ombi.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.ombi-rtr.middlewares=middlewares-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.ombi-rtr.service=ombi-svc"
  #     - "traefik.http.services.ombi-svc.loadbalancer.server.port=3579"
  #
  # tautulli:
  #   image: linuxserver/tautulli
  #   container_name: tautulli
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TZ
  #   volumes:
  #     - $DOCKERDIR/tautulli:/config
  #     - $DOCKERDIR/tautulli/logs:/logs
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.tautulli-rtr.entrypoints=https"
  #     - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.tautulli-rtr.middlewares=middlewares-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
  #     - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"
  #
  # jackett:
  #   image: linuxserver/jackett
  #   container_name: jackett
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TZ
  #   volumes:
  #     - $DOCKERDIR/jackett:/config
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.jackett-rtr.entrypoints=https"
  #     - "traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.jackett-rtr.middlewares=middlewares-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.jackett-rtr.service=jackett-svc"
  #     - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"
  #
  # hydra2:
  #   image: linuxserver/hydra2
  #   container_name: hydra2
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TZ
  #   volumes:
  #     - $DOCKERDIR/hydra2:/config
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.hydra2-rtr.entrypoints=https"
  #     - "traefik.http.routers.hydra2-rtr.rule=Host(`hydra2.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.hydra2-rtr.middlewares=middlewares-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.hydra2-rtr.service=hydra2-svc"
  #     - "traefik.http.services.hydra2-svc.loadbalancer.server.port=5076"
