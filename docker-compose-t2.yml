version: "3.7"
# MAIN DOCKER-COMPOSE

#####
# This serves as the main docker-compose file ran on premise
# Serves all of the services used by home, friends and family
####

########################### NETWORKS
networks:
  t2_proxy:
    external:
      name: t2_proxy
  frontend:
    external:
      name: frontend
  default:
    driver: bridge

########################### SERVICES
services:
### Backend Services ###

  traefik:
    image: traefik:2.5.0
    container_name: traefik
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entryPoints.traefik.address=:8080
      - --api=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    networks:
      - t2_proxy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    security_opt:
      - no-new-privileges:true
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    volumes:
      - $DOCKERDIR/shared/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log
      - $DOCKERDIR/shared:/shared
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
#      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file"

  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    restart: unless-stopped
    networks:
      - t2_proxy
      - default
      - frontend
#    ports:
#      - "9091:9091"
#    depends_on:
#      - mariadb
#      - redis
    environment:
      - TZ=$TZ
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_notifier_smtp_password
    volumes:
      - $DOCKERDIR/authelia:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=websecure"
      - "traefik.http.routers.authelia-rtr.rule=HostHeader(`login.$DOMAINNAME`)"
      - "traefik.http.routers.authelia-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    networks:
      - frontend
    ports:
      - "$PORTAINER_PORT:9000"
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/portainer/data:/data

  postgres:
    image: postgres:13.1
    container_name: postgres
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - 5432:5432
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - APP_PORT=22300
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DATABASE}
    volumes:
      - $DOCKERDIR/postgres:/var/lib/postgresql/data


### Web Fronts ###


  organizr:
    image: organizr/organizr
    container_name: organizr
    restart: unless-stopped
    networks:
      - t2_proxy
#    ports:
#      - $ORGANIZR_PORT:80
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/organizr:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=websecure"
      - "traefik.http.routers.organizr-rtr.rule=HostHeader(`organizr.$DOMAINNAME`)"
      - "traefik.http.routers.organizr-rtr.tls=true"
      ## Middlewares
#      - "traefik.http.routers.organizr-rtr.middlewares=chain-no-auth@file"
#      - "traefik.http.routers.organizr-rtr.middlewares=middlewares-basic-auth@file"
      - "traefik.http.routers.organizr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

  heimdall:
    image: linuxserver/heimdall:latest
    container_name: heimdall
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - $HEIMDALL_PORT_01:80
      - $HEIMDALL_PORT_02:443
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/heimdall:/config


### Web Services ###


  freshrss:
    image: linuxserver/freshrss
    container_name: freshrss
    restart: unless-stopped
    networks:
      - t2_proxy
#    ports:
#      - $FRESHRSS_PORT:80
    security_opt:
     - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/freshrss:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.freshrss-rtr.entrypoints=websecure"
      - "traefik.http.routers.freshrss-rtr.rule=Host(`freshrss.$DOMAINNAME`)"
      - "traefik.http.routers.freshrss-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.freshrss-rtr.middlewares=chain-no-auth@file"
  #    - "traefik.http.routers.freshrss-rtr.middlewares=middlewares-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.freshrss-rtr.service=freshrss-svc"
      - "traefik.http.services.freshrss-svc.loadbalancer.server.port=80"

  wikijs:
    image: linuxserver/wikijs
    container_name: wikijs
    restart: unless-stopped
    networks:
      - t2_proxy
#    ports:
#      - $WIKIJS_PORT:3000
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/wikijs:/config
      - $DOCKERDIR/wikijs/data:/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.wikijs-rtr.entrypoints=websecure"
      - "traefik.http.routers.wikijs-rtr.rule=HostHeader(`wiki.$DOMAINNAME`)"
      - "traefik.http.routers.wikijs-rtr.tls=true"
      ## Middlewares
#      - "traefik.http.routers.wikijs-rtr.middlewares=chain-no-auth@file"
#      - "traefik.http.routers.wikijs-rtr.middlewares=middlewares-basic-auth@file"
      - "traefik.http.routers.wikijs-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.wikijs-rtr.service=wikijs-svc"
      - "traefik.http.services.wikijs-svc.loadbalancer.server.port=3000"

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    networks:
      - t2_proxy
#    ports:
#      - $VAULTWARDEN_PORT:5055
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/vaultwarden:/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.vaultwarden-rtr.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden-rtr.rule=Host(`vaultwarden.$DOMAINNAME`)"
      - "traefik.http.routers.vaultwarden-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.vaultwarden-rtr.middlewares=chain-no-auth@file"
  #    - "traefik.http.routers.vaultwarden-rtr.middlewares=middlewares-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.vaultwarden-rtr.service=vaultwarden-svc"
      - "traefik.http.services.vaultwarden-svc.loadbalancer.server.port=80"

  joplin:
    image: joplin/server:2.1.6-beta
    container_name: joplin
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - t2_proxy
#      - backend
#    ports:
#      - "22300:22300"
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - APP_BASE_URL=${JOPLIN_APP_BASE_URL}
      - DB_CLIENT=pg
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=postgres
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.joplin-rtr.entrypoints=websecure"
      - "traefik.http.routers.joplin-rtr.rule=Host(`joplin.$DOMAINNAME`)"
      - "traefik.http.routers.joplin-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.joplin-rtr.middlewares=chain-no-auth@file"
  #    - "traefik.http.routers.joplin-rtr.middlewares=middlewares-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.joplin-rtr.service=joplin-svc"
      - "traefik.http.services.joplin-svc.loadbalancer.server.port=22300"


### Media Services ###


  overseerr:
    image: ghcr.io/linuxserver/overseerr
    container_name: overseerr
    restart: unless-stopped
    networks:
      - t2_proxy
#    ports:
#      - $OVERSEERR_PORT:5055
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/overseerr:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.overseerr-rtr.entrypoints=websecure"
      - "traefik.http.routers.overseerr-rtr.rule=HostHeader(`request.$DOMAINNAME`)"
      - "traefik.http.routers.overseerr-rtr.tls=true"
      ## Middlewares
#      - "traefik.http.routers.overseerr-rtr.middlewares=chain-no-auth@file"
#      - "traefik.http.routers.overseerr-rtr.middlewares=middlewares-basic-auth@file"
      - "traefik.http.routers.overseerr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.overseerr-rtr.service=overseerr-svc"
      - "traefik.http.services.overseerr-svc.loadbalancer.server.port=5055"

  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    restart: unless-stopped
    networks:
      - t2_proxy
#    ports:
#      - $TAUTULLI_PORT:8181
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/tautulli:/config
      - $DOCKERDIR/tautulli/logs:/logs
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=websecure"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)"
      - "traefik.http.routers.tautulli-rtr.tls=true"
      ## Middlewares
#      - "traefik.http.routers.tautulli-rtr.middlewares=chain-no-auth@file"
#      - "traefik.http.routers.tautulli-rtr.middlewares=middlewares-basic-auth@file"
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    restart: unless-stopped
    networks:
      - frontend
    ports:
      - $JACKETT_PORT:9117
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
       - $DOCKERDIR/jackett:/config

  hydra2:
    image: linuxserver/hydra2
    container_name: hydra2
    restart: unless-stopped
    networks:
      - frontend
    ports:
      - $HYDRA2_PORT:5076
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/hydra2:/config

  deemix:
    image: registry.gitlab.com/bockiii/deemix-docker
    container_name: deemix
    restart: unless-stopped
    networks:
      - frontend
    ports:
      - 6595:6595
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK_SET=022
    volumes:
      - $DOCKERDIR/deemix:/config
      - $MEDIAGATEDIR/downloaders/deemix:/downloads


### Media Servers ###


  navidrome:
    image: deluan/navidrome:latest
    container_name: navidrome
    restart: unless-stopped
    networks:
      - t2_proxy
#    ports:
#      - $NAVIDROME_PORT:4533
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      # Optional: put your config options customization here. Examples:
      - ND_SCANINTERVAL=1m
      - ND_LOGLEVEL=info
      - ND_BASEURL=""
    volumes:
      - $DOCKERDIR/navidrome:/data"
      - $MEDIADIR/Audio/Collection:/music"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.navidrome-rtr.entrypoints=websecure"
      - "traefik.http.routers.navidrome-rtr.rule=Host(`navidrome.$DOMAINNAME`)"
      - "traefik.http.routers.navidrome-rtr.tls=true"
      ## Middlewares
#      - "traefik.http.routers.navidrome-rtr.middlewares=chain-no-auth@file"
      - "traefik.http.routers.navidrome-rtr.middlewares=middlewares-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.navidrome-rtr.service=navidrome-svc"
      - "traefik.http.services.navidrome-svc.loadbalancer.server.port=4533"


### Home Systems ###


  homeassistant:
    image: ghcr.io/linuxserver/homeassistant
    container_name: homeassistant
    restart: unless-stopped
    network_mode: host
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/homeassistant:/config
#    devices:
#      - /path/to/device:/path/to/device

########################### SECRETS
secrets:
  authelia_jwt_secret:
    file: $SECRETSDIR/authelia_jwt_secret
  authelia_session_secret:
    file: $SECRETSDIR/authelia_session_secret
  authelia_notifier_smtp_password:
    file: $SECRETSDIR/authelia_notifier_smtp_password
### EOF ###
