---
version: '3.7'

services:
 traefik:
  image: traefik:v2.2
  networks:
    # Use the public network created to be shared between Traefik and
    # any other service that needs to be publicly available with HTTPS
    - traefik-public
  ports:
    - 80:80
    - 443:443
  restart: unless-stopped
#  deploy:
#    placement:
#      constraints:
#        # Make the traefik service run only on the node with this label
#        # as the node with it has the volume for the certificates
#        - node.labels.traefik-public.traefik-public-certificates == true

  labels:
        # Enable Traefik for this service, to make it available in the public network
      - "traefik.enable=true"
        # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.frontend.rule=Host:(`traefik.int.whitehome.io`)"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.int.whitehome.io`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=whitehome.io"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.whitehome.io"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
        ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
        ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file"
        # Enable HTTP Basic auth, using the middleware created above
      - traefik.http.routers.traefik-public-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-public.loadbalancer.server.port=8080

  command: # CLI arguments
    - --global.checkNewVersion=true
    - --global.sendAnonymousUsage=true
    - --entryPoints.http.address=:80
    - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
    - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
    - --entryPoints.traefik.address=:8080
    - --api=true
    - --api.insecure=true
#        - --serversTransport.insecureSkipVerify=true
    - --log=true
    - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
    - --accessLog=true
    - --accessLog.filePath=/traefik.log
    - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
    - --accessLog.filters.statusCodes=400-499
    - --providers.docker=true
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
#    - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
    - --providers.docker.endpoint=unix:///var/run/docker.sock
    - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.int.whitehome.io`)
    - --providers.docker.exposedByDefault=false
    - --providers.docker.network=traefik-public
    - --providers.docker.swarmMode=false
    - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
    - --providers.file.watch=true # Only works on top level files in the rules folder
    - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
    - --certificatesResolvers.dns-cloudflare.acme.email=thehunterewhite@gmail.com
    - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
    - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53

  volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
    - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
    - /docker-data/traefik/certs:/certificates
      # Mount the volume to read static rules
    - /docker-data/traefik/certs:/rules
      # Mount the volume for .ht authentication
    - /docker-data/shared:/shared

  environment:
      - CF_API_EMAIL=thehunterewhite@gmail.com
      - CF_API_KEY=50ec1fbb9e5c03448d6b2805fe45182df26a8


networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true
